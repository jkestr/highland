#!/usr/bin/env ruby
require 'rubygems'
require 'gli'
include GLI::App
require 'rio'

class Colors
  COLOR1 = "\e[1;36;40m"
  COLOR2 = "\e[1;35;40m"
  NOCOLOR = "\e[0m"
  RED = "\e[1;31;40m"
  GREEN = "\e[1;32;40m"
  DARKGREEN = "\e[0;32;40m"
  YELLOW = "\e[1;33;40m"
  DARKCYAN = "\e[0;36;40m"
end

class String
  def color(color)
    return color + self + Colors::NOCOLOR
  end
end

command :help do |c|
  c.action do |global_options,options,args|
    puts "Highland v. 0.0.1"
  end
end

# generating new application
command :init do |c|
  c.action do |global_options,options,args|
   # raise TypeError, 'Highland: something went wrong!'.color(Colors::RED)
    puts "Highland: init called!".color(Colors::GREEN)
    db_root = Dir::pwd + "/highland_db/"
    puts db_root
    exec_root = Dir::pwd
    begin
      Dir::mkdir(db_root)
      puts "\tcreated highland root"
     rescue
      raise TypeError, "Highland: couldn't create the database!".color(Colors::RED)
    end

    # creating directories
    Dir::mkdir("#{db_root}/db")
    puts "\tprepared db folder"

    # creating files
    manifesto_content = "collections:\n"
    File.open("#{db_root}/manifesto.yml", 'w') {|f| f.write(manifesto_content) }
    puts "\tprepared Manifesto"
    File.open("#{exec_root}/.root", 'w') {|f| f.write("Highland dependency!") }
    puts "\tprepared hidden .root file"

  end
end

exit run(ARGV)


